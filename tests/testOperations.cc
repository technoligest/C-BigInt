//
// Created by Yaser Alkayale on 2018-06-08.
//

#define _DEBUG


#include "catch.hpp"
#include "../lib/BigInt.h"

using bigint::BigInt;


TEST_CASE("Correct initialization of constructor."){
  SECTION("Null initialization"){
    BigInt int1;
    CHECK(int1.fullInteger() == vector<ull>{0});
    CHECK(int1.isPositive());
  }
  SECTION("Initialization using numbers"){
    BigInt zero1(0);
    CHECK(zero1.fullInteger() == vector<ull>{0});
    CHECK(zero1.isPositive());

    BigInt int1(1234);
    CHECK(int1.fullInteger() == vector<ull>{1234});
    CHECK(int1.isPositive());

    BigInt int2(-1234);
    CHECK(int2.fullInteger() == vector<ull>{1234});
    CHECK_FALSE(int2.isPositive());

    BigInt int5("1234");
  }
  SECTION("copy constructor"){
    BigInt int1(1234);
    BigInt int3(int1);
    CHECK(int3.fullInteger() == vector<ull>{1234});
    CHECK(int3.isPositive());

    BigInt int4(BigInt(5000));
    CHECK(int4.fullInteger() == vector<ull>{5000});
    CHECK(int4.isPositive());
  };

  SECTION("confirming that the constructor is not explicit"){
    BigInt int1 = 243555;
    CHECK(int1.fullInteger() == vector<ull>{243555});
  };

  SECTION("initilization using string constructor"){
    CHECK(BigInt("-0").fullInteger() == vector<ull>{0});
    CHECK(BigInt("-0").isPositive());
    BigInt zero(
        "-0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");


    CHECK(zero.fullInteger() == vector<ull>{0});
    CHECK(zero.isPositive());


    ;

    CHECK(BigInt("1").fullInteger() == vector<ull>{1});
    CHECK(BigInt("1").isPositive());

    BigInt one(
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001");
    CHECK(one.fullInteger() == vector<ull>{1});
    CHECK(one.isPositive());


  }

  SECTION("initialization of large numbers"){
    BigInt negativeOne(
        "-000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001");

    CHECK(negativeOne == -1);

    BigInt largePositive1("18446744073709551616");

    CHECK(largePositive1.fullInteger() == vector<ull>{0ULL, 1ULL});

    BigInt largePositive2("1234323145243152123441345");
    CHECK(largePositive2.fullInteger() == vector<ull>{14605783098605711553ULL, 66912ULL});

    BigInt largePositive3("78609192494621647456094388351");
    CHECK(largePositive3.fullInteger() == vector<ull>{127ULL, 4261412864ULL});

    BigInt largePositive4(
        "3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545904039797402237141174");
    CHECK(largePositive4.fullInteger() == vector<ull>{200000000000000182, 1, 0, 0, 0, 0, 0, 4503599627370496});
    CHECK(largePositive4.isPositive());

    BigInt largePositive5(
        "-3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545904039797402237141174");
    CHECK(largePositive5.fullInteger() == vector<ull>{200000000000000182, 1, 0, 0, 0, 0, 0, 4503599627370496});
    CHECK_FALSE((largePositive5.isPositive()));
  }


}

TEST_CASE("BigInt is initialized to sign of value given by default"){
  BigInt int1(123432);
  CHECK(int1.isPositive());

  BigInt int2(-1234);
  CHECK_FALSE(int2.isPositive());

  BigInt int3(0);
  CHECK(int3.isPositive());
}

void checkAllOperatorsFirstBiggerThanSecond(const BigInt &num1, const BigInt &num2){
  CHECK_FALSE(num1 == num2);
  CHECK_FALSE(num2 == num1);
  CHECK(num1 != num2);
  CHECK(num2 != num1);
  CHECK(num1 >= num2);
  CHECK_FALSE(num2 >= num1);
  CHECK_FALSE(num1 <= num2);
  CHECK(num2 <= num1);
  CHECK(num2 < num1);
  CHECK_FALSE(num1 < num2);
  CHECK(num1 > num2);
  CHECK_FALSE(num2 > num1);
}

void checkAllOperatorsEqual(const BigInt &num1, const BigInt &num2){
  CHECK(num1 == num2);
  CHECK(num2 == num1);
  CHECK_FALSE(num1 != num2);
  CHECK_FALSE(num2 != num1);
  CHECK(num1 >= num2);
  CHECK(num2 >= num1);
  CHECK(num1 <= num2);
  CHECK(num2 <= num1);
  CHECK_FALSE(num2 < num1);
  CHECK_FALSE(num1 < num2);
  CHECK_FALSE(num1 > num2);
  CHECK_FALSE(num2 > num1);
}
TEST_CASE("toString works"){
  vector<ull> largeNums1{75, 876324, 752};
  vector<ull> largeNums2{785, 876324, 75232};

  BigInt negative1(-1567);
  BigInt negative1_copy = negative1;
  BigInt negative2(-67234);
  BigInt largeNegative1("-1234788929148347138292");
  BigInt largeNegative2("-8919132423478418929113448347138292");

  BigInt largeNegative3("-1361129467684991793892783810002005524480");
  BigInt largeNegative4("-1361129467684991793892783810002005524496");


  BigInt positive1(123);
  BigInt positive1_copy = positive1;
  BigInt positive2(98625373);

  BigInt zero(0);
  BigInt zero2(0);
  BigInt largePositive1("1234788929148347138292");
  BigInt largePositive2("8919132423478418929113448347138292");
  BigInt largePositive3("1361129467684991793892783810002005524480");
  BigInt largePositive4("1361129467684991793892783810002005524496");

  BigInt largePositiveNumberCopy(largePositive1);
  SECTION("toString works"){
    CHECK(zero.toString() == "0");
    CHECK(negative1.toString() == "-1567");
    CHECK(negative2.toString() == "-67234");
    CHECK(BigInt("-3245432").toString() == "-3245432");
    CHECK(largeNegative1.toString() == "-1234788929148347138292");
    CHECK(largeNegative2.toString() == "-8919132423478418929113448347138292");
    CHECK(largeNegative3.toString() == "-1361129467684991793892783810002005524480");

    CHECK(positive1.toString() == "123");
    CHECK(positive2.toString() == "98625373");
    CHECK(largePositive1.toString() == "1234788929148347138292");
    CHECK(largePositive2.toString() == "8919132423478418929113448347138292");
    CHECK(largePositive3.toString() == "1361129467684991793892783810002005524480");
    CHECK(BigInt("3245432").toString() == "3245432");
    CHECK(BigInt("+123452343243232455235423764").toString() == "123452343243232455235423764");
  }
}
TEST_CASE("Comparison than works for positive and negative numbers."){
  vector<ull> largeNums1{75, 876324, 752};
  vector<ull> largeNums2{785, 876324, 75232};

  BigInt negative1(-1567);
  BigInt negative1_copy = negative1;
  BigInt negative2(-67234);
  BigInt largeNegative1("-1234788929148347138292");
  BigInt largeNegative2("-8919132423478418929113448347138292");

  BigInt largeNegative3("-1361129467684991793892783810002005524480");
  BigInt largeNegative4("-1361129467684991793892783810002005524496");


  BigInt positive1(123);
  BigInt positive1_copy = positive1;
  BigInt positive2(98625373);

  BigInt zero(0);
  BigInt zero2(0);
  BigInt largePositive1("1234788929148347138292");
  BigInt largePositive2("8919132423478418929113448347138292");
  BigInt largePositive3("1361129467684991793892783810002005524480");
  BigInt largePositive4("1361129467684991793892783810002005524496");

  BigInt largePositiveNumberCopy(largePositive1);

  SECTION("Negative Number Equality."){
    checkAllOperatorsEqual(negative1, negative1);
    checkAllOperatorsEqual(negative1, negative1_copy);

  }
  SECTION("Negative large number equality"){
    BigInt largeNegative1_copy(largeNegative1);
    checkAllOperatorsEqual(largeNegative1, largeNegative1_copy);
  }
  SECTION("Negative Number Small Comparison"){
    checkAllOperatorsFirstBiggerThanSecond(negative1, negative2);
  }

  SECTION("Negative Number Large number comparison"){
    checkAllOperatorsFirstBiggerThanSecond(largeNegative1, largeNegative2);
  }
  SECTION("Small negative with large negative comparison"){
    checkAllOperatorsFirstBiggerThanSecond(negative1, largeNegative1);
  }
  SECTION("Zero and large negative"){
    checkAllOperatorsFirstBiggerThanSecond(zero, largeNegative2);
  }
  SECTION("Zero with zero"){
    checkAllOperatorsEqual(zero, zero2);
  }
  SECTION("Zero and positive"){
    checkAllOperatorsFirstBiggerThanSecond(largePositive4, zero);
  }
}

bool checkAddition(BigInt int1, BigInt int2, BigInt result){

  CHECK(int1 + int2 == result);
  CHECK(int2 + int1 == result);

  auto int1Copy = int1;
  auto int2Copy = int2;

  int1Copy += int2;
  int2Copy += int1;
  CHECK(int1Copy == result);
  CHECK(int2Copy == result);

  return true;
}

TEST_CASE("Addition Works"){

  BigInt zero;
  BigInt zero1(0);
  BigInt zero2("-0");

  BigInt positiveSmall1(50);
  BigInt negativeSmall1(-50);

  BigInt positiveSmall2(100);
  BigInt negativeSmall2(-100);

  BigInt positiveOverflow1(9223372036854775899ULL);
  BigInt negativeOverflow1("-9223372036854775899");

  BigInt positiveOverflow2(9423372036854775899ULL);
  BigInt negativeOverflow2("-9423372036854775899");

  BigInt positiveMax("+18446744073709551615"); //std::numeric_limits<ull>::max()
  BigInt negativeMax("-18446744073709551615");

  BigInt negativeLarge1("-136112946768499179389278381000553455432005524480");
  BigInt positiveLarge1("+136112946768499179389278381000553455432005524480");


  //9223372036854775899 + 2^500
  BigInt positiveOverflow3(

      "3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545894616425365382365275");
  BigInt negativeOverflow3(
      "-3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545894616425365382365275");

  SECTION("Adding zeros"){
    checkAddition(zero, zero2, BigInt(0));
    checkAddition(zero, positiveSmall1, positiveSmall1);
    checkAddition(zero, negativeSmall1, negativeSmall1);
    checkAddition(zero, positiveOverflow3, positiveOverflow3);
    checkAddition(zero, negativeLarge1, negativeLarge1);
  }

  SECTION("Adding small positive integers without overflow works."){
    checkAddition(positiveSmall1, positiveSmall2, 150);
  }
  SECTION("Adding small positive integers with overflow."){
    checkAddition(positiveOverflow1, positiveOverflow2, BigInt("18646744073709551798"));
  }
  SECTION("Adding largepositive integers without overflow"){
    checkAddition(positiveOverflow3, positiveOverflow2, BigInt(
        "3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545904039797402237141174"));
  }
  SECTION("Adding positive and negative numbers;"){
    checkAddition(positiveSmall1, negativeSmall1, 0);
    checkAddition(positiveMax, negativeOverflow1, 9223372036854775716);
    checkAddition(positiveOverflow3, negativeLarge1, BigInt(
        "3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150750571180791571829827978164894062969933376840795"));
    checkAddition(positiveOverflow1, negativeOverflow2, BigInt("-200000000000000000"));
    checkAddition(positiveOverflow3, negativeLarge1, BigInt(
        "3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150750571180791571829827978164894062969933376840795"));
  }

}

bool checkSubtraction(const BigInt &int1, const BigInt &int2, const BigInt &result){
  CHECK(int1 - int2 == result);
  auto int1Copy = int1;
  int1Copy -= int2;
  CHECK(int1Copy == result);


  auto res = int2 - int1;
  auto int2Copy = int2;
  int2Copy -= int1;

  CHECK(res.fullInteger() == result.fullInteger());
  CHECK(int2Copy.fullInteger() == result.fullInteger());
  if(result != 0){
    CHECK(res.isPositive() != result.isPositive());
    CHECK(int2Copy.isPositive() != result.isPositive());
  } else{
    CHECK(res.isPositive());
    CHECK(int2Copy.isPositive());
  }

  CHECK(result + int2 == int1);
  auto resultCopy = result;
  resultCopy += int2;
  CHECK(resultCopy == int1);


  return true;
}

TEST_CASE("Subtraction."){

  BigInt zero;
  BigInt zero1(0);
  BigInt zero2("-0");

  BigInt positiveSmall1(50);
  BigInt negativeSmall1(-50);

  BigInt positiveSmall2(100);
  BigInt negativeSmall2(-100);

  BigInt positiveOverflow1(9223372036854775899ULL);
  BigInt negativeOverflow1("-9223372036854775899");

  BigInt positiveOverflow2(9423372036854775899ULL);
  BigInt negativeOverflow2("-9423372036854775899");

  BigInt positiveMax("+18446744073709551615"); //std::numeric_limits<ull>::max()
  BigInt negativeMax("-18446744073709551615");

  BigInt negativeLarge1("-136112946768499179389278381000553455432005524480");
  BigInt positiveLarge1("+136112946768499179389278381000553455432005524480");


  //9223372036854775899 + 2^500
  BigInt positiveOverflow3(
      "3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545894616425365382365275");
  BigInt negativeOverflow3(
      "-3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545894616425365382365275");


  //[321432,31234,18446744073709551615,134,19834,1456]
  BigInt positiveLarge2(
      "3109997124300845082263771902115797298893492109947879599307766948137232981923500882261175268884670360");

  //[0,0,18446744073709551615,134,19834,1456]
  BigInt positiveLarge3(
      "3109997124300845082263771902115797298893492109947879599307766948137232981922924716656777024749174784");

  //[145,21,0,0,0,0,956,12,0,0,0,200]
  BigInt positiveLarge4(
      "16832434884954795223171167625216411729761087369034156350394498889819942893750667352828424463371007304129963909516309479140326168312109206475141739904557938063431088950233139210344565214028777869143333582680677679249");

  //[145,21,0,0,0,0,956,12,0,0,0,200]
  BigInt negativeLarge4(
      "-16832434884954795223171167625216411729761087369034156350394498889819942893750667352828424463371007304129963909516309479140326168312109206475141739904557938063431088950233139210344565214028777869143333582680677679249");

  //[45,97234,0,0,0,0,14,95]
  BigInt positiveLarge5(
      "69049678808082654602737389836109953472567835826697226320012685271947248624124078823647589922608499676832239280165469373370343021124517933");

  //[100, 18446744073709454403, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 941, 18446744073709551533, 18446744073709551615, 18446744073709551615, 18446744073709551615, 199]
  BigInt positiveLarge6(
      "16832434884954795223171167625216411729761087369034156350394498889819942893750598303149616380716404566740127799562836911304499471085789193789869792655933813984607441360310530710667732974748612399769963239659553161316");

  BigInt positiveLarge7(
      "16832434884954795223171167625216411729761087369034156350394498889819942893750667352828424463371007304129963909516309479140326168312109206475141739904557938063431088950233139210344565214028777869143333582680677679199");
  BigInt negativeLarge7(
      "-16832434884954795223171167625216411729761087369034156350394498889819942893750667352828424463371007304129963909516309479140326168312109206475141739904557938063431088950233139210344565214028777869143333582680677679199");


  SECTION("Subtracting zeros works"){
    checkSubtraction(zero2, zero, zero);
    checkSubtraction(positiveSmall1, zero, positiveSmall1);
    checkSubtraction(negativeSmall1, zero, negativeSmall1);
    checkSubtraction(positiveOverflow3, zero, positiveOverflow3);
    checkSubtraction(negativeLarge1, zero, negativeLarge1);
  }


  SECTION("Subtracting positive numbers resulting in positive numbers works."){
    checkSubtraction(positiveSmall2, positiveSmall2, zero);
    checkSubtraction(positiveLarge5, positiveLarge5, zero);
    checkSubtraction(positiveSmall2, positiveSmall1, positiveSmall1);
    checkSubtraction(positiveLarge2, positiveLarge3, BigInt("576165604398244135495576"));
    checkSubtraction(positiveLarge4, positiveLarge5, positiveLarge6);
  }

  SECTION("Subtracting postiive numebrs resulting in negative numbers works."){
    checkSubtraction(positiveSmall1, positiveSmall2, negativeSmall1);
    checkSubtraction(positiveSmall1, positiveLarge4, negativeLarge7);
  }

  SECTION("Subtracting negative numbers works"){
    checkSubtraction(negativeSmall1, negativeSmall1, zero);
    checkSubtraction(negativeLarge7, negativeLarge7, zero);
    checkSubtraction(negativeSmall1, negativeLarge4, positiveLarge7);
  }
}

void checkPlusPlus(const BigInt &val, const BigInt &valPlus1){
  //TODO add checks to see if the return value is by reference or value

  //Checking that the operations actually happen correctly
  auto valCopy = val;
  CHECK(valCopy++ == val);
  CHECK(valCopy == valPlus1);
  valCopy = val;
  CHECK(++valCopy == valPlus1);
  CHECK(valCopy == valPlus1);


  valCopy = valPlus1;
  CHECK(valCopy-- == valPlus1);
  CHECK(valCopy == val);
  valCopy = valPlus1;
  CHECK(--valCopy == val);
  CHECK(valCopy == val);

}

TEST_CASE("Increment and decrement operators"){
  BigInt zero;
  BigInt max1("18446744073709551615");
  BigInt max1Plus1("18446744073709551616");
  BigInt multipleOverflow(
      "84162174424773976120418278743704253867693938852344177610926225477367921589367617020819151587564116260224341143643542471317169483063624151072773606462457598124901460409710515989646900272066295946461025280892862463");
  BigInt multipleOverflowPlus1(
      "84162174424773976120418278743704253867693938852344177610926225477367921589367617020819151587564116260224341143643542471317169483063624151072773606462457598124901460409710515989646900272066295946461025280892862464");
  BigInt multipleOverflowMinus1(
      "84162174424773976120418278743704253867693938852344177610926225477367921589367617020819151587564116260224341143643542471317169483063624151072773606462457598124901460409710515989646900272066295946461025280892862462");

  BigInt negativeMultipleOverflow(
      "-84162174424773976120418278743704253867693938852344177610926225477367921589367617020819151587564116260224341143643542471317169483063624151072773606462457598124901460409710515989646900272066295946461025280892862465");
  BigInt negativeMultipleOverflowPlus1(
      "-84162174424773976120418278743704253867693938852344177610926225477367921589367617020819151587564116260224341143643542471317169483063624151072773606462457598124901460409710515989646900272066295946461025280892862464");
  BigInt negativeMultipleOverflowMinus1(
      "-84162174424773976120418278743704253867693938852344177610926225477367921589367617020819151587564116260224341143643542471317169483063624151072773606462457598124901460409710515989646900272066295946461025280892862466");

  BigInt negativeMax1("-18446744073709551616");
  BigInt negativeMax1Plus1("-18446744073709551615");


  checkPlusPlus(zero, BigInt(1));
  checkPlusPlus(max1, max1Plus1);
  checkPlusPlus(multipleOverflow, multipleOverflowPlus1);

  SECTION("Incrementing negative numbers."){
    checkPlusPlus(negativeMax1, negativeMax1Plus1);
    checkPlusPlus(BigInt(-1), BigInt(0));
    checkPlusPlus(BigInt(-500), BigInt(-499));
    checkPlusPlus(negativeMultipleOverflow, negativeMultipleOverflowPlus1);
  }
}

void checkShifting(const BigInt &original, const BigInt &shiftAmount, const BigInt &afterRightShiftByAmount){
  CHECK(original >> shiftAmount == afterRightShiftByAmount);
  CHECK(afterRightShiftByAmount << shiftAmount == original);
}
TEST_CASE("Bit shifting"){
  BigInt zero;
  BigInt positiveSmall(12345667);
  BigInt positiveMedium("98764334567888655323244");
  BigInt positiveLarge("99889843194132897412378641333124453412345241");
  BigInt maxShift(64);

  BigInt n1(
      "7309009169833805991742109081377613029949215913990519808925262818035226072881935101565690278790329950403044214773038720585639080924754348182792691282195716002257936819195217609330966690289294788085810861176596363437121826874155990631259630921004918019230384111930539462622762237952");
  BigInt n2(75);
  BigInt n3(
      "193467861832282365611055985641514733351907820294804184866330181865764068182774076921924165126228625750201791050138830622905679328440976180640057301918418954655309926414077971636105214008647730979943053231046638919587344893047716604400487969998874157214859264");
  BigInt n4("99889843194132897412378641333124453412345241");
  BigInt n5("1842642372965147413376496337921321812917347049694352873101459456");

  BigInt n6("9187364798143768912789143278691329768143");
  BigInt n6_shift("134443");

  //TODO this will only work if we improve efficiency
  //BigInt n6_result("218221739668520647983656396586907460626065844581246314433687762695107884196793470179569318401904445160895402365173947988618823947941353014082794355061423941780806455292834938799238035560495372119883626580030791417103584954152476221739713661167973946916149435318360684578853916491026280704760779621976874071954158673182979568061911599848138105244145630865526829360775433593884094271134260449946437431205531829453428273919969814150093699904179828872086076951462891207200224428985271437892968853077425287754746625744278602334707069431513352969995728742750085805046248058847667069336472661363283020551081138094036031515110329926642387824205944552126096689570917878397975424623177388015714398592191067681097166689103394799473965778965293347481199460240142246070308436873773964690594565532579244803543053832487475301512237583585042625752638997708487795495069572609102733429289699138416043301350216022870731675468662713344341542121088306363758713217216215557770313986129448299768340319477808680553745710644611440002910014935676115008962974744453440984054303217471943675280555402547601597808671878688045773691319803660596181452335386676150947049663030146312595274354733174054046432451072140975755463673814235817712553768899769791838178066590966069876405968001895330611941920980466241310965722818570307776118917312145696180496518224087020604368013116577121129312670066589847419595736837306262102336999081942243791162512299899385302843551508134334154268714127520015140481652721964460285285673525211613524310083792878460498883669680333271155419105331782693143255240016176275863776750181563294241183594202346011163739085177489259491448265998435991658754161654021004398701404800151140698737607314669804336858763078923937007065207125311074694645283163763809251034545225935234559294805086657186873449848983394433820453488609398048292150903686612128605197911441417792230560527232793230322765848799402221606810329521480547656246197664484185619240174437806965411624716675320449258863595748956643487042737833114899555314396028585728635359771758867680867680777260143743501127075816113784017721872079838555473360522767225954861295530147182021990730667380157584868411346613736832635279533630843134268449242171827017006695742726136240038754924507673398953928407465781772646026765648808545348447287407642625724055267484332319820686472981643466787807408698819678861102757200979483818274853521558399783104192645722577749541616759254340167926778162327919776622466983398628144062316885306930083896172048134327132016486390228627016002855604966327816524639315305400778541803753698912648114238569180810243387100309674896955905507665654061969182006622009034640478145325805942407526548007127567990763283271603073627230107750525293810252433355750099415755155580467145893769911783101106291540567842650547855934934655363318906564487553446421574318551730705487431013400374307417350517973971942954569799386207792951603178055596322476458912625565144948612260975726908441922539009633876164895652822130311267272271244830406343656748668474063115632529437252912816849648602992383086325013444487536032783069909157922102314802557450672418050607226310782923568317568725895950944701947287574914835566092945751050110254614274228919394079112138621234609136696016871391797338515913976560898277766815922860025533286383575032612229569908113234602344324162926338383923512484748750382359190928055984169142570927993737849757748580372835388653071504456730664946138536265246243123668473476845613142212626411828290040171464821419064356012022216344337773597024534353576910503229354092752859646532073148076321531984691635233223324133536038415066022857202564914052286167778809920422177415866251370618500680627343385326233837878681596025112763547991767676442270777651475484965528168116331582443275533027793961273849298944541671194812672498110128563914029011352537770123945478295920943366050654162604235803786100813375151413426353811327158236044828876797786505609077077177214676037328593408913979689681886410062649514917104928015691387123551529884796025839419465522628036436381163777075066332347063330390385718823325291807927489455979982058816012477585411413832633469306070680270349059269399104805893987016825889479875608940006589916553394904404700330395642101988245029355975821635589067315828031695161126851485374452361416711979002966620270677292291725904106978247147885819666715282707618825041331513328208808443711278312205103720829229025746567067473692245310798279141912993572875658094979387662554469620288154829039495719180114463071551410821150761666595049542848199380085197105219455314126491395155906507090733379113216002921215065092947663456904147713731008283294758276728692405296676760348590378939284252336225440804904573340233555028270460373249939404665626682943269428135745372967821002846174024024369595297300443590995650435532279381634025979472986689291142048150879097527541628033770321853382598082749120392231735600789788525565286722438864513375020587820721594548414086742879869426881772122246475764525307771705838584809255932943890283138677076082756417444953569014273807947544755539371719233530851417166369124164489407083427511673865681076829696175282894486064548548878969602018992658833869938170979295896195953369325751229715225296748907356571226253876809468851803770028419421890906352292432303079486355639846587999714278533151511084847322275960513802609920249155877932951649313936721633364502130260098537050742319747389114985609148156818459171175482938775054354355746287034392884525975554916172509706773502399708393855138086534913029791397919133851665079573414884954897317092338465486995706896310627941335171334484855093557714012561411836399110296146845468187897773972778171891798605046165426996883686399523282796382210202917629108836503198195014332601229893581056300793777878660340541610352386787113208047868579490023122733805065724076306232548690399397385343067758098978473566320514133967000389982661199073935424598556503010139584444121242848997739930289228072144209988367990046936853024620981806145617927052476481326944584061908068128549853227851527204743127129619008899554295530083863924187412240560432532888057801387200445282060033955028778206409738143814883192399057526821891715200572998232475838204046816130437307111157018662359197860674023734778528884813233064434659528429690366582346431639251822304347014775248548565574139356416993842354300155382280872822620871791882886338219117432714561914632509860903554562192004152424806296577342160252283334860281024738099958428297410771207247938520591543311392836701719806157239155852646417360006368819476580649917169208150440807236754184385698936496501203743643078540071718180093677850370866552473637502418036950911491182637628625252659705452193614637145560314519242474275261855583256450608523575036134684161707972717776908485886788931161121766048740518501421255499660563491902504207665852983978163049509188158598200423023004992409459229539887590000647595941711551266301254806484919380779672045725719332815438317306703117404038876529091505421054517055743084936893845980732809012078336848859075156484842001862876760565825753181730530423273203736954447871804755473750338501498149046924601166281655071000274814808648697298030390245673677552607255095412964716960633233335889456182123500711251226860198900041480747356840827642940615699131901173598468336625355140448597210904217427329375315137805293183466751551752820147446783543968942061123261066467021492339022407386947924791865902204790219647433533482718213687709024803320039699125877734447823475447704439990883832200513682539630139755273453083333184130772864780368382254251544851897317477365137965994467978975748816011721689213238548936888740743790892063503333026800359790813395496410622671354374373533055175192849972494160558215984897858749548791711160946508026304206551656582364692122817782642015081152745782684536154709251374939853307589749544495790384879443012400813062835278072679678509476291594013274266901103789440448889665860048014451969552936410119313697912290934278449553561763213254250265652077388932302468126832369833445036158685786252886497453561759914933492205631794008715214382679977117597191220622095249699756447210412074495781155035713127123511548650290837357435940174798234470785982168178159134581476813438214310326739360057676814063015980415826971950087246734939079857793779045921591023454813286665030437028164898964010459128536182728118837759832728903540457336041740076214174728250434227008239418220100103766106161283639476618586967948553013342690507863363682346878716910651839702584600031994758831224924688469778800535231664106432611466669447406260592290399255393298305377885962393750925008209724858600398166809098964479624934133592626487250097938622951187138523886607504235177584101721440789259954321014390805049600546523610819855391888418116852513021897998880616548065206284841282252547203198136301997296566748737837068565927133876896312935105334465588165795231635940807207328781333691424814258918613170197346718692766856412156349908190496499340061495129912876039938979060154226879452899638792632510680594136303768241638036140761315463021006986207881612312025205013536323088961981470506098792896532020740068938638130327195661664646116822826483094846524027264903006641460643839125812664019818012688241695276583280105778446343996996605246078439234589718798312604747512376854528198253711281661154800056562940761033007631328813670589700039939517554342567766114052328053605444686477158697114795691969784944973631913139622409180599412002108124335701491493364319280897607106528982677708422270716755937232932968056293924987529777192517934453275577092549815502540299546950087840060009924483928385805388661401683134296981174551571616145953536387348357261632979631884056526996037764093738105581408894843178230249074761631997263789402772674977456909528971457708732812062914471330992236238185485475870873864658440378029772971101397288435506824157830467418541793512972059571901522327742704924569764165706174029518201520814570504265576295944939047969088089376217538823910657944776536285627088902242718030605549366529655867238737264886443066080352803667920798304716468372224934586005642802079556990624738471738756956283635693194091621619063564381930505406761240904004347227618566039513336268337591035043831556238499411407567798292254052243976056539587414931814929838444933633737712901454605949567685794382565981203063962707211821788582975024235605529990495495021986812719770694618867229151109065217563912857485202716254855919728314959352530434729374545932196025805884622657753529702643851667291106311963864772289856885543676532759629894423297564131735258470191839606600538858187778296133120565004296965724153654026652187428246840942350596767994888826483116577267353915386674329057667594320896133571365267105309499680642054878030835993653901430293426630066841661945317222162693852544691509495537621316176602967549312929133836740198062051895057893677637759409002522599464210882965932769607083323695672673236052926954846429394172477083706549628548145851721203222995064873380183226728891195680194200221296131449932164097133455395390045909683719416386994236634205501922351996419215409392180314502405805066236266977695292997869002746190523711987855519851811995127336831918105582328298441863908359846965740954181873808857448712444259142164184861409301795422320931204401565177767177538294848772141536547686961304748485187749676617778237940703790942434832463007794024008699119509175500845239518192755786075650201583754277734436324476878059283383561287874001262386557742270757138503505639945055026239113708114085075977725463018459447089638129856444432769453054689215067944230017567063265637595653596532802031139184243082952061119641765485098357465397037968335259062694263869233453376074449371995033410190447518158629488589973574590509882931546656046448350233919380743667073121834778110546232172071456619320790429295764402749992995884220654736757131849734915141441477798157806903612593991773563615307966434182099936178942914558581577125487864069880005594909246550549060475887127399049466872010668726667475135834170974650171558825420960184608392739385872220002991513844491583033480056120563101198280605166336737636816434455384524266535095748908214833181161264724974116325930944078377188667943972380835974787039925650935167690149067470793106147061805342148050685326411517364086644279118554305775230384611206449591594460433209084833833321683779436538872779133925968606532223315106477173760579504800281412086040427076991904005437810629863027220374858927141694920146717083607627135454584418117736156546953107723872067444082503881716579927664312065852003378213252948045773726323883248005044188166396843642261676390221294473285614235004664357291417231219015066020533039289539770036709342635911614893470306669130387743845448665112565033509753039905049826127681172948248933740746135814788596141894626238345552884762515859858383295177647838536511544940817162116507129627011510841363498572711534606452746921887278679191851532914016522639985052284669907069554877193720767568110423444093069566669589021312668795474589113652480280213539066171762152666655878857194762590197674618313553006115047901512693272155122137832214334000600154267105258554745152150927985102456800775203614555849419696311119941671787696549031265101051247440428254883106798654093018414486486279404621827318615515186498389343461266072501837402867983009583857894604393417566370449044586841891827314497238146960405358416669520196208438991404629574425130731541236253215073848070553834820771422590230306426711298583538424159740339667043184124900463662932220451339124471617536841484606343007849919749435968266938613631841802367321546428959985046089012892309841693568854410715736268503878507263094308501093827051532429693019642350766821028401967978423708812887796657122526849173074105963808304725584161758494216609843678162518662011147299902505353707446292291725761435585180058694948392848644267636364084040277915741530784962475081968954401167157145229770745029370784524751608303259531727827824616478923051684108921719637371305650141179327179889670082022936650334738091086112159579213223993629605922624807281700683598464848854991680744522781152729882008161146948669377698079514765401913121326891793677828312799431494516698805771484054458562957389716522229460598468221529597833153816968471410695969868018748602488197741950035716952523681360731496651752711990626411114968212237172324331805595858394031518633265841564219978706129774154224791392145012111896409463896875174039308290531816641362220148437377200681311013214629652787691293896594232252468943178632037807156846087867683477637217808423038550176635109779019412499861854748318890512649347593136258270698515528403608247780043207722463434152884443296459575108645300722503587999071419863717577508907606246217955647537056614416169716650474930146929641990301874843301108102493393250231603292424890608793218511580476569890154784267413070777676044866308343953108735472338933969240620023493977595347162968316802945011610530608654575055843164959638846292814939577151069419873475061896738463203113703711724040019375397434421539091295828213219867357877892179783841941014691139387609009495377304704686964524440466532728130417603135008881500713228146128319858395432584250315416077239188358884025156173708189725341612951529828147023227020137645657566744429886272303875534235487508227996576882126068917613082414943223291966629303475629855290185393397000398468933183584630077544076508737983848031001742298453733962665544708826609643921757350646314494333309539463637710417387916995598903628086893293693561244849667115674803470394135851906957744407809841321574107278753918268473847060646899214868460992127150441793057211561901718072329870151612914269249445589374405888347249676453300255847865084979343083663166869209155979397611165445012520273525491187366915096808325505883647590519071323298219051804725344993097278555854215093137297587058849929740722328759141704410462202382001324781182680566005429117468350992314040357276400302663215453553231509470155697156973397594062111707941725412161620675020113475334895427268205448758304804506808774859207803505513484727996796905053103999589016230848262255007168663073933189970345331110939179195657123721657486209656085324628565453141872702058281752356742038643367091802786302397861563663672545795976677437910962011682859000337863564460074914278388857848165598363230215957109917126858146858613260696360627401057880025254564271447532504100569987627361227908516598785694746082044715568515624803396171968662661670263652258264354774345025034864902286071456223165906352949705512942559142087626086743057370501091249205958286800724007770870260492917609277294486491984796902781507182825600156066847740582117303675921609756694814601492280961395889348456579377194554641983485375523138555522631701321444705009396411117761282228986385618244990724985138745477722307684771525250543557820223517692053550841234813102597725595528732769768969621875359541796309281995317175471523582121468527077789393409960552417092327951658532122394489013354795608668581111487000047851828349994835616176929978508054738001917478706845877020259375233144866216926583782362327408161482460615247126936464201173916423489148770718608819792403462622182763473666315564697099287159683351796054100855183462747893540084111092196026293211094299454618207079090292832511989021897665673150346291330966544933470391882999609772661500528775422589859110092235233829643475395037355852341672472364216133468693323696160989040826739222960279803575504569369559981679096514769473472187336108353718282006802057813984609120946999685051413169693709895252800402852601306843031071412561738927142331275526273797395644551081250131066613938508620262576977937023334717792032274465901980372140511587322205447366219064621841118614342330782117912454393436520616603921053138167585979924355711450049184632114732813600507263096315673855241576235701938474254062421006800968052715615836854235575712401603387467530235160240047859603706699789795339666310366891437117570400552127909764087570739061190155815393135572257244192810389208193891280046056800824579257464732739810528682828522329440830592503232849809630177861619762334671418399194816642755580363856414957122921300493433442102375753104962651476838685738821352518948668199900693425286410235231068502669223003534561771998209467898949347859288046369492831281063824184652894557453742940513478076891000566788614918508436956745615887816550119598316930142377456483207559423374654558326934598048355325189904636923310731050156025114995125129384067480949897357685835516673996063275449272213260637570724032383488412857645012556671087184081811184722656126893591463033235979425461480920774326070495421896236388539660959585632982214806713659174568652903251344850279470913929168870832645072681228118780502373541624395732205743074963472027466672462705363629913507094877441362165642360104465853879031887158662160256369613641571338653619688548479322639969742802378874861039131113563207622870894351411531581039271821076326989337445450093559394436905743643461539685934310487301389748067604107290975929468822370011042034275081438666491738112524543151845688856538722076125154577104601787364598989681620397495412314372304982992223787018821121045933532052485148872716662783186037182709709340987758949312975520631612327063947374428854841835741691079730510926252218088857210176575487564033595206192174981773300223607117137788361017848703583630506107473168239273271122847001411996440145057648696842895445148758475415732674911407497350241654538573671529254843520429514168606144727157695816074225356475048096421690351030595075992566849787742042987660566073835410335687979264655074655206909851626064531191153699321145832736015940582967863760692995048048045853083414397593511863318380115476112983606878010190436248961633518935488188690966380699220689057144692280169835167057051678043713925525477727160411105600398089846965696300391341392783064037739496297947040587905125026400356056349645199149322345676264603902863854478526110851732987766878629595108997380707509662255532888620378070009844841426242308726807129383330357867822011448884396930964749747357936475646648032640101864382191021296253164008259548430920017395878538315197323112948586214058934842932085747856671491948263717392532848348169017532954347433247384555621103565077596683216539653832647827630765646590154188038379382689698907687935826637032544260762880608753039659248737467569163632730289858020774678462631448304086676546691641764637115741146312052070951860472517919884578559984129726003654697096117720282436013017157138406910542953865881713374783995095023748954013135024738989158069484727486297367505350404473045053942566344239274611699378413241386991010336589733013796876637211611385609819842097332214930544110827489798467686164900099982590936577697244106038125003584075979305430412867849871136358531582571204663884892340431262511494935214795724224513837234606900224925997730950071225643576150948343735312753976373591444989852215069357032604670857766948155779129086003288070884329016224701707666881725154511400264804250908474541524133667373572863661115314161631728544711018388732826553493835685105746021186005671144911768261330996764418456753979682215181739647885854409492393370566131415920907484023742523910673371639952332724578367980343618840059815500313774860727221853756068682888775403464492496630096223250892846895065961909881567563909807932674671542638498980107901721466422011021848558723143627774505751654655381388741886318326659347624968650626152700166574606986870634575261522198893268433900787097031766554302598255781602400032731360999740998741894533635344304171449603516621828067770503801347921639049797281880312113017050690200207882228099701986994105726183132666706742635335450079792276286472754612736056927023987817910296939881793896129832558664430133571890067325841024018190724080532218264879462296284051044455831306579873623658387857105850420644185117172660336590468420403312493773870859577351246443132292968603115895505114328494873430143767543514592836546158076107304431320282960582332189176064759600586270101847338353809573238494745693841986210816042369742022030383531563564165652207697749845522144974385620623093801838033178428989022756054259645209332010118560708523297868892789456071365738409144172715292309219432170942732703404021596432415887333230309371060491257602690862968217720375726247535117800420387742257587581431784049219541945996556359468964561180103022795522434119377341313176747500611145669101731180954004478494158319230424027972908764119899083393997572987030324962128436558459281020124283673000385523963352880103133638367835540674458094018583290222411778759752968263083444663375579121263139216430533458225351334678904336930104794464479022919076294493974150223103866805108927408636448250401234806573617588665751361317862848630149723127894289626162423684427635368365600952538004184181351558903894452159018721242989135390518586612406419834688991827748791170374892849444044961583192029512769315709728489002885727873437901385863488047697622534621967378896420951637014311692317871626648570623763402634907992827078681705953785990774141333292029737586017717194112933955945426502380066557785242350193193213849032364341308805630897262106095524610137733409069321016540304433930485222323664714071562496590270118091788682035688062538203743108094837919949810945081605372845599568632619875443904676521656569730311786090550133492548622238681582254940899234183348192539837888410709091575471561827859649881140050626466350871963827120903146190410992966167770919563199492370334427305449563100320911433133611479509005351500385686017316308708866105577464654105334148530065985212209009727762286596740873733564177718789574270235322003069277646016575640930962633029822531809297960286606848503546238279382444890042513955081711924154439723837207917655872718861285725084566791760598641237674720413202428352719174177742055387429255800593220692383754442815423545735390124624857232174532860208541431196079310772400850810129205251676757419257577535088085807822726380455934734134145615030125031621025768484360390155174758115936578413401239232080587560565532523779320134500430253430608790073982756070207641072953232481466467372519815020959457965034852121679204733199793506688641444208795153284150676176546295686857994066847782093615671204570900323012129465804295097399421222201682616081510585949560173328339356446184679600864849216086882764792225068662433560001741063609583848743324183413906073204136592511965488108141621492486744546831321566419860698652259599008033150099342756014194176758487635310253067461184617952623126258843157960163480076753718154443606851174000253216010004550243182432565958273204090395183618903037933283613243516876371007523785880759942457617449125829013955401167806182155152085324947132903193505764007124375606233983503916595549294879161542250862880589820307515071580553445420875262621170656655295144451172867266809273546197615768372758889016917211174379770052494520362531988258309676392763337174519909569356049598561021351503667045143017800138379676438379444450125359743368590445498527893734071972769636575524118116094874178678703328270091693872479803845611777499568771682398183935817914440586658102044389298182106562791310786280234921401948465839420675084171068020957812921900474667658431887849390572092022479562564760072673953463929524764962371176030555771780649205936578224644109940892359460959661965233600082562882762608279391959397052381065674522277526983718916575114402359613074424507466030282310117572022197909863381798165728689029248303028043909595761451295578979301711208308162011747608826530865047305747868632718789620512456436467939559241257010010553174095221751520078435629585155578169690821662489686293871325029804184991878004404108020097794341222862492720950741564499455834748398624825463582864418718633059291973832783953313611714193463461122559463343386701072574318013106765793465269586255283354964684054776360630060740749557536237892859973338316961611475371403450469912603385875233047386151815064748799867408168978130245438323344692821395637774108159271151036027022945401219182254699150957324219684672708816119117461680904900492295731310086571831767968559647428741052446625427330293327772205502279410367508369367256134921354834447915146274910971508848501347425581754489653148039935952475162407087892886007081505821101040686537930461367953481790488655732595423969554609192351417708254518626326851323740853001246537906097470417371342190619794151585433647142248561244267051449500471794527271368552525840528062545116656845958600647132364092669832571580966612041898814024731905139760228844868140807822735861141383736939583675993959752288745540562912261703959300416446952292742624189737606027781640043211720738387421655105797509911830883999239419654767754479305245602764142259757919206036206857124710971540937906078923837954319158935612778555963013558401953657462406475035879917248432601094465051813896300680183120218813836874553686916417908406978127646621506211738511923417442684349374509556261225373398493515652638740842990101356093033451250038273401786215969927863554195433433092238235834406715159684158024649086576697386269188259209228231885988715979465935893315790669169841467189745450051440279251478228450707913899063624647202806709921744858674190198422766994065930380083947185616679802490330801810949403205870085430613680895516111689661047699583330918739502713895453817567302710505404660199504579687699923829533780171510598349905604302003571538467318184112869786349267308559792231557719736390872117817205469946957316596727270175744065834166737751861367352283013437374949477552450560404245627623748641639314335914677903090605137614176495913075469073996759258425397626338837688972350348285026534033937780953314905377163846494172659395158482746195398904734107795789654403137948124599903558931959062954790803595289647204523526477057603995091891400603588355746340408261689595083948978538593277724885856593559525611405909397324342154510705639216081548780702150572850633449144311977093473845932018301154135576135755460723990704170501587371394180320281673710594958014369219544758158157080125106588398271158113888026157259197095148667363142645690511822931095474593763653821345548166966287174120804047831366863281892484607981843997009270823050471719934997658372242308677177774283586043407899995097298802175246925973609515664846400375028003816935002162111985503998184788998017193255672744208216398291661636312448541058147450770583467940886433781527723027097370982166847120687183483153964956128629731696690528941890497063742774694556311131705574513589276291316643063828989598491566611767566336824863511145195036564124555266457237529148230547029355349103543994337229289496867638505114015338533212319694820076078701514540034907133425704288382538501016044096377763090738483975091105590325004635294244054326508672236277712276553899493628903467841492675854651529804647281074589585264045799069704588073063917140730177094283470600229510008265757374977811356808270397427765911127186241770550447239365141793185497255003928661711521404522312324149922368747183595026491083474395237858360357589992901389408836980001696700885036747877438436688597229383772206053259089404179448324088863757991734395145170369936391887086978378275336616823852685588130025372460943369046685040367512382947799599616090855323737279796532532071247614517904096164184270131714213605926510069696139408530165371465605583602176712806760009992613719269820715506442963771838070902992519116993759404590121836465011338832796981975975849582662185231111668324672758249670517881587160411016604812585933665620132625577084116262001292982785673143680554153447559839004335633691575017476456229178686925683545644108132185076920993285212041334634179488670915851744539033085577903728494590938806021052641025969471068436713371258319073184270466440913333099655557078342227056300843196336244853209113404431715789653953279372962472042404066080034567020904306496448714189974288077518512208732592927235484625771969222902056479135457521286894331545452195467974193894623343263482759575096807662459543206265478027377368869313045409058891617581172777482785049943025384189628871337520317279409274117111596485371820747306723996337669705138420899561673925526945814451339950375277872954278036398413224122451147659700966883624894558014740883003605899060931254480508063985923056746297439183345212750122688463211874579750405016178685532862284626095432763478448888486770887868278405183129753493208562068698291977685778260961640217022181512722874626079807579392998744520017137777800676376908081590945021612912709131881124762566569181123868427190792083498378313573038089901696796068800125944932405513766372621104723583632400719452053817721991275104806074013103326386193653450942288345541042218013140925770708571528682652809007508958284719753539021816531441271964058557357232762248711301314403076969314996756016803868201277063478453017656702832733511300166365119217698171272548010995364849845611690032310292341734829324364590886273904728467128381707200929953466427009842338186828423590560280883844527400233516043618150735107189348230351201625003739283009041260621411381703037203560858670619265593252963354194395635002035171251609667289133426511702196328193845472604065623180915880914292506209586335684647141756915580061519689249856155119811668599120694504595759725771002691875118542264458313205990425464240258290800875315117449976215032894989821011435157674188867975851053574672197663322063452073647863033803249589216707225420146502105523120971638925791092605280102942295569474009112282137336706104804777955750165185911975787621853823759494008447835586586018632639628845265412773128396116132163978978476523751865400231042813703652954957728587277429958816687063391137426981563995363207420287140852135138096761625086894274808224471761663853105611486473576966819517700161836037490030779471973632151719710620104582659453728404868420447796611868877815160041457473189312269682407558859895012981022164129267627729997959715274566311738379778603916910679912575510075244195743926062061113422021125283336539256413193683565733435503883892243068518056773388011046631560074193005346979259487460020404901479163563038489101157524221391138216551542301272083563427854861254920308393187427529551320983301928521593114505586134127511684801562767946056137695784744898493287568679986958578175951873572966179976820816852770008913606897826073105963611437110301412968766594345029925425392214680751779800370793672695605521137606571635407235369367215816926091380808816831969982321180635447390060133337990866482549028423952845883023562084935597506989492750471468330842983042033641021429290865188859702081630886149695030119461133427027474973184307335782979158435625574799523948290809737525755800641705434304621908597114532646742548246301145402668301678538697715799098011929663312864964916344913784928294937532166066172317761532036786819492079415994874172182016482662483542431690252254442694983981106516091332110047939957582215435197906458643915477057884630786511134741913288091265489453144538892203098906800462482769706775848749876794550727795986908342176516998481764266959019828096309231771113533895804758076104801445255261936386922145689643153756847662783725443132367044598009892196231008903805958217791107956379672030123004401984622707592590959702563816899099997766113752110467802221513140232374845625825494162824861448556050989135484684866997683568387001219790012149925863998932024360045706964118968219607079331891308211160125886554246796070094375950453524435125193071684272523637362987975753166671141460689881488784399508970594686703431535764066977955333947658576631214071288084474500705116655355690097182114823503395114812016238101173470012358571256478219401576153720497553850721009994567228479259748818973610377037342127032478586084977561979752685993576770151867370482224122209011935103101147435023958819813638291365654400428638048308595167331645667006628324874974024183729159150328755081152581629271184109529606095978748376037650080717123637349035444697965527130912083089972716860499633465833091753913236742698007191820666602789922312320079083786329050220968907370005132131763181070098319706997290649867493605063136290199188492225583103378565205675128327363699696017377639987240670462323557085402478928523240274130474943909702887807183934038770209068169132401307646302474892022996706323141414100841306374647216729117213872815046662262419276051127070573524051596249017901084728404490255284739139094419877309550465954142377735115487429664854055100841575342503441711711922154715447988483222033260935951854731629228667216422319377101689964607783542003683268322320684068752976577398296193356142721713697217575908986344880445902296513955346781458181066986141274194006975538754008534462772770236720975303884260238357718207975001490346533649975110130608232179025495185101108119527062547055489412315377141064329921767584376987524288028511952300107009844010219254423197766416347211166021674594119728175783115176607895361888004259565194969810394703205707313774296236905632698435780270717659866035109992718552492590121461705871678455188626143003021597136717210149581728002910273933660916086171650516026914129666862315707339947120059173690960981105558780976687156798584293828593371271857391970111463541456762518824390491787572338651329029687488816593599155368773664251088890268458062361729538302193072533019510841738669446477596480924531281717828685194376803538248856805294523443411666179046317570925333313682757226045931230882205544300877559672378622011904126419212734122480164219680216566477738696837487093474938590707657209393399099772350546689921409181419778674649681387032604793477806946906412218806140028221309816529474408103612023815334579785249543050635249811640533337206149818967202724056386603288538947051945094787558630504864191728572074635052579329860732668341185763505923148717535166397083762225942190007684052307401967235841851982086908557329169031024811949442693327533799747980252800732110069267793690954216574748443965114246414364044463549075686083813944116405746690501711588499915808005665778716434371720200256387887438968795246525800668985824929100687926197419932533705348691817296750838921141495986503119588012390112178831487284683379808714727577952386001762059175247684794263986460869942071182893178480832657258667778011359450844469408502275430060380628719716898488615241384222313903131671257299193627927121793201434083681680182198311090013921362632014908841094458961651171409526762981560904351683719576784507314616369197187374747458686618477224051917520919914738996393600387060828973935811223612357555195765073840448170108988237659542674839530937549216469296515440482732393975313276270270535175651696876333894209429897127113128833910207650843441093455327433967273063199889794985356691962092573559259631226394912516409792868700647944689498743647289838049368097273885172123997105526852787011698654947968945000614255175336599785128233126904848262958029275886376691038405869404760004665393091233993780310065887797688349963720994583752822387626192321733265293076617526491869066298954269198156218185877846346857054779620477249837354695962410707392139096934664646995865097142711623269465285904398877533790670451488040150561819152810427425241524094201807399864540092113568249720729729320874115146311015210568249190799303274882349454301525951641451374119864875811533444412572669916893340579586983022925429780108823122454072264053049673529622792174692587622847995290606508182177661728205580670940868645604883885640594886672223736396994152487184144227919751782087026594752730995641904580245200593909466311940465458420562772433462584072486516614894956815251774389894580781006589875420328798477602885484961377011438384892410295194765087356165734939061578244416424078105087693284308092043013657214484281392334035701576115825997591334706423973224677033474451961214982331208494837241647257207559069793157996142503326723166938476935495133466458491331150786394854455748097742658050356314286291603480498492694235519950647383508919025451115799329767433558830647792499244459595392436249043203614902763057503922886753561274192965978273200139355208252548176034689248064665939735571719521032451972115254410050108445821042948841266550791049809864184030271435039056460554376748905559518058605640966707982934043234990998126182294534198135385984432345219285193448615480726176715493455477671845725864993123332551184999273184352550418112944431225425330537338022076726124371009634779331771994896385374579975684149292375835155158225101973764926004399967426100834415283210269637855625594857330540447446602308505171776801832990432344875810896260009442302931721441731727338095192029310869947204124048513021294565430168968948516380700738951674897872273484751146296165632730641506328716702707274513950342599688173260277859325969928767809233952453767018641553306168045949522561071243180989482829253402142777780469098858114304920993066354531806058339656564468256031225359455142342337815634135527427754152372423331786583661541376167699515691385967599853058384347899700581958860134256442433181116495755557851583907379844140847503358781637304334111950610008214684396688627399954450536296823825107099500136907806730585387977632889145898357229498916582330459229152830407441398274757007428103901641419658344043627370186154714519783857082080617747731369816202104483429361037399257074807745668292823923417420508225969343679811913334717562488940965606983557113394535960951768675632099112432954715456177620088579687524936062072345505876729314467470269665138546307011711892549351133429531883499715228539134147082532841826816634424918051350911459749053959064986510733906741079960161938946076446731001876522406610404037253801411911459833617492737662006566896860106365787542606359981015686817396332641842785543237473620562437056807776051014901007817450517332728478455089654742477050853603257982516717860977142038983037578380297834300045740029750299040706613157028552525481706837408913106004870324608982827393942844632719074789736332654584203839808187559311850046239487949528109342866259143656769518815216223337614184403345377994100530859698005195453547289176270585518037818278371997345766574691378189604834414696851845040297611259723464731478104747101802647783594744621903241276948754093202866380942623935640873366695749957356580418623846107080322385439101615617693919135865533432466393264164532629138768152612919052924723865153284567044396985439485287685228414278128080685978319169324817140750492015885763543351424518458938642597039458155606652138338071814576824926966261849428893499983728925469767184507074139873412746325812079020971315268482458102582917725886859751385719519315871705001678450817272629144406576003934479008947626003154335674747053459234105024226488093722358283021014680817359404570595644095694960955877024960707168484399775744");
  CHECK((zero >> BigInt("41345432432")) == zero);
  CHECK((zero << BigInt("41345432432")) == zero);

  CHECK((zero >> positiveSmall) == zero);
  CHECK((zero << positiveSmall) == zero);

  CHECK((positiveMedium >> zero) == positiveMedium);
  CHECK((positiveMedium << zero) == positiveMedium);

  CHECK((zero >> positiveLarge) == zero);
  CHECK((zero << positiveLarge) == zero);

  CHECK((positiveLarge >> zero) == positiveLarge);
  CHECK((positiveLarge << zero) == positiveLarge);

  CHECK((n1 >> n2) == n3);

  CHECK((n5 >> maxShift) == n4);
  CHECK((positiveSmall >> n4) == zero);

  CHECK((positiveLarge >> positiveLarge) == zero);

  //CHECK()
  //checkShifting(n6,n6_shift,n6_result);
}